-- Remove Aggregate Views
DROP VIEW AGGREGATE_TASK_EXECUTION;
DROP VIEW AGGREGATE_TASK_EXECUTION_PARAMS;
DROP VIEW AGGREGATE_JOB_EXECUTION;
DROP VIEW AGGREGATE_JOB_INSTANCE;
DROP VIEW AGGREGATE_TASK_BATCH;
DROP VIEW AGGREGATE_STEP_EXECUTION;

-- Create Prefixed  TASK V2 Tables and migrate date as well as sequences to prefixed tables
-- Then remove those original tables as their names will be sued for Task V3 tables
CREATE TABLE V2_TASK_EXECUTION (
    TASK_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    START_TIME TIMESTAMP DEFAULT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    TASK_NAME VARCHAR(100),
    EXIT_CODE INTEGER,
    EXIT_MESSAGE VARCHAR(2500),
    ERROR_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    EXTERNAL_EXECUTION_ID VARCHAR(255),
    PARENT_EXECUTION_ID BIGINT
);

CREATE  TABLE V2_TASK_EXECUTION_PARAMS (
    TASK_EXECUTION_ID BIGINT NOT NULL,
    TASK_PARAM VARCHAR(2500),
    CONSTRAINT TASK_EXEC_PARAMS_FK FOREIGN KEY (TASK_EXECUTION_ID) REFERENCES V2_TASK_EXECUTION(TASK_EXECUTION_ID)
);

CREATE  TABLE V2_TASK_TASK_BATCH (
    TASK_EXECUTION_ID BIGINT NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    CONSTRAINT TASK_EXEC_BATCH_FK FOREIGN KEY (TASK_EXECUTION_ID) REFERENCES V2_TASK_EXECUTION(TASK_EXECUTION_ID)
);

CREATE  TABLE V2_TASK_LOCK (
    LOCK_KEY CHAR(36) NOT NULL,
    REGION VARCHAR(100) NOT NULL,
    CLIENT_ID CHAR(36),
    CREATED_DATE TIMESTAMP NOT NULL,
    CONSTRAINT LOCK_PK PRIMARY KEY (LOCK_KEY, REGION)
);

CREATE TABLE V2_TASK_EXECUTION_METADATA (
    ID BIGINT NOT NULL,
    TASK_EXECUTION_ID BIGINT NOT NULL,
    TASK_EXECUTION_MANIFEST CLOB,
    PRIMARY KEY (ID),
    CONSTRAINT V2_TASK_METADATA_FK FOREIGN KEY (TASK_EXECUTION_ID) REFERENCES V2_TASK_EXECUTION (TASK_EXECUTION_ID)
);


INSERT INTO V2_TASK_EXECUTION
SELECT * FROM TASK_EXECUTION;

INSERT INTO V2_TASK_EXECUTION_PARAMS
SELECT * FROM TASK_EXECUTION_PARAMS;

INSERT INTO V2_TASK_TASK_BATCH
SELECT * FROM TASK_TASK_BATCH;

INSERT INTO V2_TASK_LOCK
   SELECT * FROM TASK_LOCK;

INSERT INTO V2_TASK_EXECUTION_METADATA (ID, TASK_EXECUTION_ID, TASK_EXECUTION_MANIFEST)
SELECT ID, TASK_EXECUTION_ID, TASK_EXECUTION_MANIFEST
FROM TASK_EXECUTION_METADATA;

DROP TABLE TASK_EXECUTION;

DROP TABLE TASK_EXECUTION_PARAMS;

DROP TABLE TASK_TASK_BATCH;

DROP TABLE TASK_LOCK;

DROP TABLE TASK_EXECUTION_METADATA;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for TASK_SEQ;
    execute immediate 'CREATE sequence V2_TASK_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE TASK_SEQ;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for TASK_EXECUTION_METADATA_SEQ;
    execute immediate 'CREATE sequence V2_TASK_EXECUTION_METADATA_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE TASK_EXECUTION_METADATA_SEQ;

-- Create Prefixed  BATCH V4 Tables and migrate date as well as sequences to prefixed tables
-- Then remove those original tables as their names will be sued for BATCH V5 tables

CREATE TABLE V2_BATCH_JOB_INSTANCE (
    JOB_INSTANCE_ID BIGINT NOT NULL PRIMARY KEY,
    VERSION BIGINT,
    JOB_NAME VARCHAR(100) NOT NULL,
    JOB_KEY VARCHAR(32) NOT NULL,
    CONSTRAINT JOB_INST_UN UNIQUE (JOB_NAME, JOB_KEY)
);

CREATE TABLE V2_BATCH_JOB_EXECUTION (
    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    VERSION BIGINT,
    JOB_INSTANCE_ID BIGINT NOT NULL,
    CREATE_TIME TIMESTAMP NOT NULL,
    START_TIME TIMESTAMP DEFAULT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR(10),
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    JOB_CONFIGURATION_LOCATION VARCHAR(2500) DEFAULT NULL,
    CONSTRAINT JOB_INST_EXEC_FK FOREIGN KEY (JOB_INSTANCE_ID) REFERENCES V2_BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
);

CREATE TABLE V2_BATCH_JOB_EXECUTION_PARAMS (
    JOB_EXECUTION_ID BIGINT NOT NULL,
    TYPE_CD VARCHAR(6) NOT NULL,
    KEY_NAME VARCHAR(100) NOT NULL,
    STRING_VAL VARCHAR(250),
    DATE_VAL TIMESTAMP DEFAULT NULL,
    LONG_VAL BIGINT,
    DOUBLE_VAL DOUBLE PRECISION,
    IDENTIFYING CHAR(1) NOT NULL,
    CONSTRAINT JOB_EXEC_PARAMS_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES V2_BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE V2_BATCH_STEP_EXECUTION (
    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    VERSION BIGINT NOT NULL,
    STEP_NAME VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID BIGINT NOT NULL,
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP DEFAULT NULL,
    STATUS VARCHAR(10),
    COMMIT_COUNT BIGINT,
    READ_COUNT BIGINT,
    FILTER_COUNT BIGINT,
    WRITE_COUNT BIGINT,
    READ_SKIP_COUNT BIGINT,
    WRITE_SKIP_COUNT BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT BIGINT,
    EXIT_CODE VARCHAR(2500),
    EXIT_MESSAGE VARCHAR(2500),
    LAST_UPDATED TIMESTAMP,
    CONSTRAINT JOB_EXEC_STEP_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES V2_BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);

CREATE TABLE V2_BATCH_STEP_EXECUTION_CONTEXT (
    STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT STEP_EXEC_CTX_FK FOREIGN KEY (STEP_EXECUTION_ID) REFERENCES V2_BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
);

CREATE TABLE V2_BATCH_JOB_EXECUTION_CONTEXT (
    JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
    SHORT_CONTEXT VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    CONSTRAINT JOB_EXEC_CTX_FK FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES V2_BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
);


INSERT INTO V2_BATCH_JOB_INSTANCE
SELECT * FROM BATCH_JOB_INSTANCE;

INSERT INTO V2_BATCH_JOB_EXECUTION
SELECT * FROM BATCH_JOB_EXECUTION;

INSERT INTO V2_BATCH_JOB_EXECUTION_PARAMS
SELECT * FROM BATCH_JOB_EXECUTION_PARAMS;

INSERT INTO V2_BATCH_STEP_EXECUTION
SELECT * FROM BATCH_STEP_EXECUTION;

INSERT INTO V2_BATCH_STEP_EXECUTION_CONTEXT
SELECT * FROM BATCH_STEP_EXECUTION_CONTEXT;

INSERT INTO V2_BATCH_JOB_EXECUTION_CONTEXT
SELECT * FROM BATCH_JOB_EXECUTION_CONTEXT;

DROP TABLE BATCH_JOB_EXECUTION_CONTEXT;
DROP TABLE BATCH_STEP_EXECUTION_CONTEXT;
DROP TABLE BATCH_STEP_EXECUTION;
DROP TABLE BATCH_JOB_EXECUTION_PARAMS;
DROP TABLE BATCH_JOB_EXECUTION;
DROP TABLE BATCH_JOB_INSTANCE;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BATCH_STEP_EXECUTION_SEQ;
    execute immediate 'CREATE sequence V2_BATCH_STEP_EXECUTION_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BATCH_STEP_EXECUTION_SEQ;


begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BATCH_JOB_EXECUTION_SEQ;
    execute immediate 'CREATE sequence V2_BATCH_JOB_EXECUTION_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BATCH_JOB_EXECUTION_SEQ;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BATCH_JOB_SEQ;
    execute immediate 'CREATE sequence V2_BATCH_JOB_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BATCH_JOB_SEQ;

-- Migrate BOOT3_ prefixed Task Tables and sequences to the default Task V3 table structure
CREATE TABLE TASK_EXECUTION
(
    TASK_EXECUTION_ID     BIGINT NOT NULL PRIMARY KEY,
    START_TIME            TIMESTAMP(9) DEFAULT NULL,
    END_TIME              TIMESTAMP(9) DEFAULT NULL,
    TASK_NAME             VARCHAR(100),
    EXIT_CODE             INTEGER,
    EXIT_MESSAGE          VARCHAR(2500),
    ERROR_MESSAGE         VARCHAR(2500),
    LAST_UPDATED          TIMESTAMP(9),
    EXTERNAL_EXECUTION_ID VARCHAR(255),
    PARENT_EXECUTION_ID   BIGINT
);

CREATE TABLE TASK_EXECUTION_PARAMS
(
    TASK_EXECUTION_ID BIGINT NOT NULL,
    TASK_PARAM        VARCHAR(2500),
    constraint TASK_EXEC_PARAMS_FK foreign key (TASK_EXECUTION_ID)
        references TASK_EXECUTION (TASK_EXECUTION_ID)
);

CREATE TABLE TASK_TASK_BATCH
(
    TASK_EXECUTION_ID BIGINT NOT NULL,
    JOB_EXECUTION_ID  BIGINT NOT NULL,
    constraint TASK_EXEC_BATCH_FK foreign key (TASK_EXECUTION_ID)
        references TASK_EXECUTION (TASK_EXECUTION_ID)
);

CREATE TABLE TASK_LOCK
(
    LOCK_KEY     CHAR(36)     NOT NULL,
    REGION       VARCHAR(100) NOT NULL,
    CLIENT_ID    CHAR(36),
    CREATED_DATE TIMESTAMP(9) NOT NULL,
    constraint LOCK_PK primary key (LOCK_KEY, REGION)
);

CREATE TABLE TASK_EXECUTION_METADATA
(
    ID                      BIGINT NOT NULL,
    TASK_EXECUTION_ID       BIGINT NOT NULL,
    TASK_EXECUTION_MANIFEST CLOB,
    primary key (ID),
    CONSTRAINT TASK_METADATA_FK FOREIGN KEY (TASK_EXECUTION_ID) REFERENCES TASK_EXECUTION (TASK_EXECUTION_ID)
);


INSERT INTO TASK_EXECUTION
SELECT * FROM BOOT3_TASK_EXECUTION;

INSERT INTO TASK_EXECUTION_PARAMS
SELECT * FROM BOOT3_TASK_EXECUTION_PARAMS;

INSERT INTO TASK_TASK_BATCH
SELECT * FROM BOOT3_TASK_TASK_BATCH;

INSERT INTO TASK_LOCK
SELECT * FROM BOOT3_TASK_LOCK;

INSERT INTO BOOT3_TASK_EXECUTION_METADATA
SELECT * FROM TASK_EXECUTION_METADATA;


begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BOOT3_TASK_EXECUTION_METADATA_SEQ;
    execute immediate 'CREATE sequence TASK_EXECUTION_METADATA_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BOOT3_TASK_EXECUTION_METADATA_SEQ;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BOOT3_TASK_SEQ;
    execute immediate 'CREATE sequence TASK_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BOOT3_TASK_SEQ;

DROP TABLE BOOT3_TASK_EXECUTION_METADATA;
DROP TABLE BOOT3_TASK_TASK_BATCH;
DROP TABLE BOOT3_TASK_LOCK;
DROP TABLE BOOT3_TASK_EXECUTION_PARAMS;
DROP TABLE BOOT3_TASK_EXECUTION;

-- Migrate  prefixed BATCH Tables and sequences to the default BATCH V5 table structure

CREATE TABLE BATCH_JOB_INSTANCE
(
    JOB_INSTANCE_ID BIGINT       NOT NULL PRIMARY KEY,
    VERSION         BIGINT,
    JOB_NAME        VARCHAR(100) NOT NULL,
    JOB_KEY         VARCHAR(32)  NOT NULL,
    constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
);

CREATE TABLE BATCH_JOB_EXECUTION
(
    JOB_EXECUTION_ID BIGINT       NOT NULL PRIMARY KEY,
    VERSION          BIGINT,
    JOB_INSTANCE_ID  BIGINT       NOT NULL,
    CREATE_TIME      TIMESTAMP(9) NOT NULL,
    START_TIME       TIMESTAMP(9) DEFAULT NULL,
    END_TIME         TIMESTAMP(9) DEFAULT NULL,
    STATUS           VARCHAR(10),
    EXIT_CODE        VARCHAR(2500),
    EXIT_MESSAGE     VARCHAR(2500),
    LAST_UPDATED     TIMESTAMP(9),
    constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
        references BATCH_JOB_INSTANCE (JOB_INSTANCE_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS
(
    JOB_EXECUTION_ID BIGINT       NOT NULL,
    PARAMETER_NAME   VARCHAR(100) NOT NULL,
    PARAMETER_TYPE   VARCHAR(100) NOT NULL,
    PARAMETER_VALUE  VARCHAR(2500),
    IDENTIFYING      CHAR(1)      NOT NULL,
    constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
        references BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION
(
    STEP_EXECUTION_ID  BIGINT       NOT NULL PRIMARY KEY,
    VERSION            BIGINT       NOT NULL,
    STEP_NAME          VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID   BIGINT       NOT NULL,
    CREATE_TIME        TIMESTAMP(9) NOT NULL,
    START_TIME         TIMESTAMP(9) DEFAULT NULL,
    END_TIME           TIMESTAMP(9) DEFAULT NULL,
    STATUS             VARCHAR(10),
    COMMIT_COUNT       BIGINT,
    READ_COUNT         BIGINT,
    FILTER_COUNT       BIGINT,
    WRITE_COUNT        BIGINT,
    READ_SKIP_COUNT    BIGINT,
    WRITE_SKIP_COUNT   BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT     BIGINT,
    EXIT_CODE          VARCHAR(2500),
    EXIT_MESSAGE       VARCHAR(2500),
    LAST_UPDATED       TIMESTAMP(9),
    constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
        references BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT
(
    STEP_EXECUTION_ID  BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
        references BATCH_STEP_EXECUTION (STEP_EXECUTION_ID)
);

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT
(
    JOB_EXECUTION_ID   BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT CLOB,
    constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
        references BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

INSERT INTO BATCH_JOB_INSTANCE
SELECT * FROM BOOT3_BATCH_JOB_INSTANCE;

INSERT INTO BATCH_JOB_EXECUTION
SELECT * FROM BOOT3_BATCH_JOB_EXECUTION;

INSERT INTO BOOT3_BATCH_JOB_EXECUTION_PARAMS
SELECT * FROM BOOT3_BATCH_JOB_EXECUTION_PARAMS;

INSERT INTO BATCH_STEP_EXECUTION
SELECT * FROM BOOT3_BATCH_STEP_EXECUTION;

INSERT INTO BATCH_STEP_EXECUTION_CONTEXT
SELECT * FROM BOOT3_BATCH_STEP_EXECUTION_CONTEXT;

INSERT INTO BATCH_JOB_EXECUTION_CONTEXT
SELECT * FROM BOOT3_BATCH_JOB_EXECUTION_CONTEXT;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BOOT3_BATCH_STEP_EXECUTION_SEQ;
    execute immediate 'CREATE sequence BATCH_STEP_EXECUTION_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BOOT3_BATCH_STEP_EXECUTION_SEQ;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BOOT3_BATCH_JOB_EXECUTION_SEQ;
    execute immediate 'CREATE sequence BATCH_JOB_EXECUTION_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BOOT3_BATCH_JOB_EXECUTION_SEQ;

begin
    declare newSequenceStart int;
    set newSequenceStart =  next value for BOOT3_BATCH_JOB_SEQ;
    execute immediate 'CREATE sequence BATCH_JOB_SEQ  start with ' || newSequenceStart;
end;

DROP SEQUENCE BOOT3_BATCH_JOB_SEQ;

DROP TABLE BOOT3_BATCH_STEP_EXECUTION_CONTEXT;
DROP TABLE BOOT3_BATCH_STEP_EXECUTION;
DROP TABLE BOOT3_BATCH_JOB_EXECUTION_PARAMS;
DROP TABLE BOOT3_BATCH_JOB_EXECUTION;
DROP TABLE BOOT3_BATCH_JOB_EXECUTION_CONTEXT;
DROP TABLE BOOT3_BATCH_JOB_EXECUTION;
DROP TABLE BOOT3_BATCH_JOB_INSTANCE;


